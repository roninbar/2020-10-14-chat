{"version":3,"sources":["features/chat/socket.js","features/chat/chatSlice.js","components/Chat/Chat.js","components/Sidebar/SidebarChat.js","components/Sidebar/Sidebar.js","App.js","features/user/userSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["socket","io","on","debug","message","sendMessageAsync","createAsyncThunk","a","emit","chatSlice","createSlice","name","initialState","messages","reducers","truncateMessages","state","length","sendMessage","payload","time","sender","text","push","status","receiveMessage","extraReducers","pending","arg","meta","actions","Chat","groupData","chatData","useState","input","setInput","messagesEndRef","useRef","Object","keys","className","isGroup","sampleData","filter","g","id","chat","Avatar","src","picture","IconButton","SearchOutlined","MoreVert","map","index","classResult","from","typing","key","Date","toLocaleString","ref","InsertEmoticon","AttachFile","onChange","e","target","value","placeholder","type","onClick","preventDefault","newMessage","date","setTimeout","current","scrollIntoView","Mic","SidebarChat","props","onSideBarClicked","undefined","lastMessage","Sidebar","React","open","setOpen","anchorRef","handleClose","event","contains","getChatMessages","handleListKeyDown","groups","group","prevOpen","useEffect","focus","title","aria-controls","aria-haspopup","Popper","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","MenuItem","App","setChatData","sideBarData","userSlice","require","setUser","username","configureStore","reducer","chatReducer","user","userReducer","Boolean","window","location","hostname","match","store","dispatch","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3da4a596.chunk.js","sourcesContent":["import io from 'socket.io-client';\r\nimport debug from 'debug';\r\n\r\nconst socket = io();\r\n\r\nsocket.on('connect', function() {\r\n    debug('chat:socket')('Connected.');\r\n});\r\n\r\nsocket.on('disconnect', function() {\r\n    debug('chat:socket')('Disconnected.');\r\n})\r\n\r\nsocket.on('chat', function (message) {\r\n    debug('chat:socket')('Received message:', message);\r\n});\r\n\r\nexport default socket;\r\n\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport socket from './socket';\r\n\r\nexport const loadAllMessagesAsync = createAsyncThunk(\r\n    'chat/loadAllMessages',\r\n    async function () {\r\n\r\n    },\r\n);\r\n\r\nexport const sendMessageAsync = createAsyncThunk(\r\n    'chat/sendMessage',\r\n    function (message) {\r\n        socket.emit('chat', message);\r\n    },\r\n);\r\n\r\nconst chatSlice = createSlice({\r\n    name: 'chat',\r\n    initialState: {\r\n        messages: [],\r\n    },\r\n    reducers: {\r\n        truncateMessages(state) {\r\n            state.messages.length = 0;\r\n        },\r\n        sendMessage(state, { payload: { time, sender, text } }) {\r\n            state.messages.push({ time, sender, text, status: 'sent' });\r\n        },\r\n        receiveMessage(state, { payload: { time, sender, text } }) {\r\n            state.messages.push({ time, sender, text, status: 'received' }); \r\n        },\r\n    },\r\n    extraReducers: {\r\n        [sendMessageAsync.pending](state, { meta: { arg } }) {\r\n            state.messages.push({ ...arg, status: 'pending' });\r\n        },\r\n    },\r\n});\r\n\r\nexport const { truncateMessages, sendMessage, receiveMessage } = chatSlice.actions;\r\n\r\nexport default chatSlice.reducer;\r\n\r\n","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport {\r\n  InsertEmoticon,\r\n  AttachFile,\r\n  MoreVert,\r\n  SearchOutlined,\r\n  Mic,\r\n} from \"@material-ui/icons\";\r\nimport React, { useState, useRef } from \"react\";\r\nimport \"./Chat.css\";\r\nimport sampleData from \"../Sidebar/sampleData/data.json\";\r\n\r\nconst Chat = ({ chatData }) => {\r\n  const [input, setInput] = useState(\"\");\r\n  // const [messages, setMessages] = useState([]);\r\n\r\n  const messagesEndRef = useRef(null);\r\n\r\n  let messages = [];\r\n\r\n  let groupData;\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    if (messages) {\r\n      const newMessage = { message: input, date: \"19-09-20 19:32\", from: \"Me\" };\r\n      // setMessages((messages) => [...messages.value, newMessage]);\r\n      messages.push(newMessage);\r\n      setInput(\"\");\r\n      setTimeout(() => {\r\n        messagesEndRef.current.scrollIntoView();\r\n      }, 10);\r\n\r\n    }\r\n  };\r\n  if (Object.keys(chatData).length === 0) {\r\n    return <div className=\"chat\"></div>;\r\n  } else {\r\n    const isGroup = sampleData.filter((g) => g.id === chatData.id);\r\n    if (isGroup.length) {\r\n      groupData = isGroup[0];\r\n      if (groupData.chat) {\r\n        messages = groupData.chat;\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"chat\">\r\n        <div className=\"chat__header\">\r\n          <Avatar src={groupData?.picture ?? null} />\r\n          <div className=\"chat__headerInfo\">\r\n            <h3>{groupData?.name ?? \"Room name\"}</h3>\r\n            {/* <p>{groupData?.lastMessage ?? \" Last seen on\"} </p> */}\r\n          </div>\r\n          <div className=\"chat__headerRight\">\r\n            <IconButton>\r\n              <SearchOutlined />\r\n            </IconButton>\r\n            <IconButton>\r\n              <MoreVert />\r\n            </IconButton>\r\n          </div>\r\n        </div>\r\n        <div className=\"chat__body\">\r\n          {messages.map((message, index) => {\r\n            let classResult =\r\n              message.from === \"Me\"\r\n                ? \"chat_message chat_reciever\"\r\n                : \"chat_message\";\r\n\r\n            classResult += message.typing ? \" chat__typing\" : \"\";\r\n\r\n            return (\r\n              <p key={index} className={classResult}>\r\n                <span className=\"chat__name\">{message.from}</span>\r\n                {message.message}\r\n                <span className=\"chat__timespan\">\r\n                  {new Date().toLocaleString(\"he-IL\")}\r\n                </span>\r\n              </p>\r\n            );\r\n          })}\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n        <div className=\"chat__footer\">\r\n          <IconButton>\r\n            <InsertEmoticon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <AttachFile />\r\n          </IconButton>\r\n          <form>\r\n            <input\r\n              onChange={(e) => setInput(e.target.value)}\r\n              value={input}\r\n              placeholder=\"Type a message\"\r\n              type=\"text\"\r\n            />\r\n            <button onClick={sendMessage} type=\"submit\">\r\n              Send a message\r\n            </button>\r\n          </form>\r\n          <IconButton>\r\n            <Mic />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Chat;\r\n","import { Avatar } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./SidebarChat.css\";\r\nconst SidebarChat = (props) => {\r\n  \r\n  const handleChatClick = () => {\r\n    props.onSideBarClicked(props)\r\n  };\r\n\r\n  let typing;\r\n  if (props.typing) {\r\n    typing = <div className=\"sidebarChat__typing\">Typing...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"sidebarChat\" onClick={handleChatClick}>\r\n      <Avatar src={props.picture ?? undefined} />\r\n      <div className=\"sidebarChat__info\">\r\n        <h2>{props.name ?? \"Room Name\"}</h2>\r\n        <p>{props.lastMessage ?? \"Room Name\"}</p>\r\n        {typing}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SidebarChat;\r\n","import React from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport sampleData from \"./sampleData/data.json\";\r\n\r\nimport SidebarChat from \"./SidebarChat\";\r\n// import Icons from '@material-ui/core'\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\n\r\nconst Sidebar = ({onSideBarClicked}) => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const anchorRef = React.useRef(null);\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n  const getChatMessages = (event) =>{\r\n    onSideBarClicked(event);\r\n  }\r\n  function handleListKeyDown(event) {\r\n    if (event.key === \"Tab\") {\r\n      event.preventDefault();\r\n      setOpen(false);\r\n    }\r\n  }\r\n  const groups =  sampleData.map((group,index) =>      {\r\n    return (<SidebarChat id={group.id} key={index}\r\n        typing={group.typing}\r\n        picture={group.picture}\r\n        name={group.name}\r\n        lastMessage={group.lastMessage} onSideBarClicked={getChatMessages}\r\n      />)\r\n    });\r\n\r\n  const prevOpen = React.useRef(open);\r\n  React.useEffect(() => {\r\n    if (prevOpen.current === true && open === false) {\r\n      anchorRef.current.focus();\r\n    }\r\n\r\n    prevOpen.current = open;\r\n  }, [open]);\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__header\">\r\n        <Avatar src=\"Assets/me.png\" />\r\n        <div className=\"sidebar__headerRight\">\r\n          <IconButton title=\"Status\">\r\n            <DonutLargeIcon />\r\n          </IconButton>\r\n\r\n          <IconButton title=\"New Chat\">\r\n            <AddIcon />\r\n          </IconButton>\r\n          <IconButton\r\n            title=\"Menu\"\r\n            ref={anchorRef}\r\n            aria-controls={open ? \"menu-list-grow\" : undefined}\r\n            aria-haspopup=\"true\"\r\n            onClick={handleToggle}\r\n          >\r\n            <MoreHorizIcon />\r\n          </IconButton>\r\n          <Popper\r\n            open={open}\r\n            anchorEl={anchorRef.current}\r\n            role={undefined}\r\n            transition\r\n            disablePortal\r\n          >\r\n            {({ TransitionProps, placement }) => (\r\n              <Grow\r\n                {...TransitionProps}\r\n                style={{\r\n                  transformOrigin:\r\n                    placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n                }}\r\n              >\r\n                <Paper>\r\n                  <ClickAwayListener onClickAway={handleClose}>\r\n                    <MenuList\r\n                      autoFocusItem={open}\r\n                      id=\"menu-list-grow\"\r\n                      onKeyDown={handleListKeyDown}\r\n                    >\r\n                      <MenuItem onClick={handleClose}>New Group</MenuItem>\r\n                      <MenuItem onClick={handleClose}>Create a room</MenuItem>\r\n                      <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n                      <MenuItem onClick={handleClose}>Archived</MenuItem>\r\n                      <MenuItem onClick={handleClose}>Starred</MenuItem>\r\n                      <MenuItem onClick={handleClose}>Setting</MenuItem>\r\n                      <MenuItem onClick={handleClose}>Log out</MenuItem>\r\n                    </MenuList>\r\n                  </ClickAwayListener>\r\n                </Paper>\r\n              </Grow>\r\n            )}\r\n          </Popper>\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__search\">\r\n        <div className=\"sidebar__searchContainer\">\r\n          <SearchOutlined />\r\n          <input type=\"text\" placeholder=\"Search or start new chat\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__chats\">\r\n       {groups}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Chat from \"components/Chat/Chat\";\r\nimport Sidebar from \"components/Sidebar/Sidebar\";\r\n\r\nfunction App() {\r\n  const [chatData, setChatData] = useState({});\r\n  function handleChatClick(sideBarData) {\r\n    if (sideBarData?.id) {\r\n      setChatData(sideBarData);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__body\">\r\n        <Sidebar onSideBarClicked={handleChatClick} />\r\n        <Chat chatData={chatData} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const { createSlice } = require('@reduxjs/toolkit');\r\n\r\nconst userSlice = createSlice({\r\n    name: 'user',\r\n    initialState: {\r\n        name: '',\r\n    },\r\n    reducers: {\r\n        setUser(state, { payload: username }) {\r\n            state.name = username;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setUser } = userSlice.actions;\r\n\r\nexport default userSlice.reducer;\r\n\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport chatReducer from '../features/chat/chatSlice';\r\nimport userReducer from '../features/user/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    chat: chatReducer,\r\n    user: userReducer,\r\n  },\r\n});\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import './index.css';\r\nimport { receiveMessage } from 'features/chat/chatSlice';\r\nimport socket from 'features/chat/socket';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nsocket.on('chat', function (message) {\r\n  store.dispatch(receiveMessage(message));\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}