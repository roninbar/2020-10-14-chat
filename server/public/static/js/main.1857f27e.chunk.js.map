{"version":3,"sources":["components/MessageCard.js","components/MessageList.js","components/NewMessageForm.js","App.js","features/chat/chatSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","card","margin","spacing","backgroundColor","props","sender","MessageCard","children","other","classes","Card","className","main","flexBasis","overflowY","position","top","left","bottom","right","zIndex","opacity","backgroundImage","backgroundAttachment","cardContent","display","flexFlow","padding","alignSelf","time","MessageList","connect","messages","chat","withRedux","Grid","item","component","container","direction","wrap","map","id","text","justify","alignItems","key","message","xs","CardContent","Typography","variant","NewMessageForm","TextField","label","fullWidth","autoFocus","chats","name","height","outerGridContainer","messageList","header","footer","input","App","Container","lorem","createAsyncThunk","a","chatSlice","createSlice","initialState","reducers","truncateMessages","state","length","addMessage","payload","push","actions","configureStore","reducer","chatReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1857f27e.chunk.js","sourcesContent":["import { Card, makeStyles } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles(function (theme) {\r\n  return {\r\n    card: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: function (props) {\r\n        return props.sender === 'me' ? '#dcf8c6' : 'white';\r\n      },\r\n    },\r\n  };\r\n});\r\n\r\nexport default function MessageCard(props) {\r\n  const { children, ...other } = props;\r\n  const classes = useStyles(props);\r\n  return <Card {...other} className={classes.card}>{children}</Card>;\r\n}\r\n\r\nMessageCard.propTypes = {\r\n  sender: PropTypes.string.isRequired,\r\n};\r\n\r\n","import { CardContent, Grid, makeStyles, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MessageCard from './MessageCard';\r\n\r\nconst useStyles = makeStyles(function (theme) {\r\n    return {\r\n        main: {\r\n            flexBasis: '83%',\r\n            overflowY: 'auto',\r\n            position: 'relative',\r\n            '& > .overlay': {\r\n                position: 'absolute',\r\n                top: 0,\r\n                left: 0,\r\n                bottom: 0,\r\n                right: 0,\r\n                zIndex: -1,\r\n                opacity: 0.125,\r\n                backgroundImage: 'url(/images/bg-chat-tile-light.png)',\r\n                backgroundAttachment: 'fixed',\r\n            },\r\n            '& > .underlay': {\r\n                position: 'absolute',\r\n                top: 0,\r\n                left: 0,\r\n                bottom: 0,\r\n                right: 0,\r\n                zIndex: -2,\r\n                backgroundColor: '#e5ddd5',\r\n            },\r\n        },\r\n        cardContent: {\r\n            display: 'flex',\r\n            flexFlow: 'column nowrap',\r\n            padding: theme.spacing(1),\r\n        },\r\n        sender: {\r\n            alignSelf: 'flex-start',\r\n        },\r\n        time: {\r\n            alignSelf: 'flex-end',\r\n        },\r\n    };\r\n});\r\n\r\nconst mapStateToProps = ({ chat: { messages } }) => ({ messages });\r\n\r\nconst withRedux = connect(mapStateToProps);\r\n\r\nexport const MessageList = withRedux(function (props) {\r\n    const classes = useStyles(props);\r\n    return (\r\n        <Grid item component=\"main\" container direction=\"column\" wrap=\"nowrap\" className={classes.main}>\r\n            <div className=\"overlay\" />\r\n            <div className=\"underlay\" />\r\n            {props.messages?.map(({ id, sender, time, text }) => (\r\n                <Grid item container direction=\"row\" justify={sender === 'me' ? 'flex-start' : 'flex-end'} alignItems=\"center\" key={id} className={classes.message}>\r\n                    <Grid item xs={8}>\r\n                        <MessageCard sender={sender}>\r\n                            <CardContent className={classes.cardContent}>\r\n                                {sender !== 'me' && (\r\n                                    <Typography variant=\"caption\" className={classes.sender}>{sender}</Typography>\r\n                                )}\r\n                                <Typography variant=\"body1\">\r\n                                    {text}\r\n                                </Typography>\r\n                                <Typography variant=\"caption\" className={classes.time}>{time}</Typography>\r\n                            </CardContent>\r\n                        </MessageCard>\r\n                    </Grid>\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    );\r\n})\r\n\r\n","import { TextField } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nexport function NewMessageForm() {\r\n  return (\r\n    <TextField variant=\"outlined\" label=\"Type a message\" fullWidth autoFocus />\r\n  );\r\n}\r\n","import './App.css';\r\nimport { Container, Grid, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport { MessageList } from './components/MessageList';\r\nimport { NewMessageForm } from './components/NewMessageForm';\r\n\r\nconst chats = [\r\n  { id: 1, name: 'Girit' },\r\n  { id: 2, name: 'Doovshanit' },\r\n  { id: 3, name: 'Bzique' },\r\n  { id: 4, name: 'Namir' },\r\n];\r\n\r\nexport const useStyles = makeStyles(function (theme) {\r\n  return {\r\n    container: {\r\n      height: '100vh',\r\n    },\r\n    outerGridContainer: {\r\n      height: '100%',\r\n    },\r\n    messageList: {\r\n      height: '100%',\r\n    },\r\n    header: {\r\n      flexBasis: '7%',\r\n    },\r\n    footer: {\r\n      flexBasis: '7%',\r\n    },\r\n    input: {\r\n      padding: theme.spacing(1),\r\n      backgroundColor: '#f0f0f0',\r\n    },\r\n  };\r\n});\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  return (\r\n    <Container className={classes.container}>\r\n      <Grid container spacing={0} className={classes.outerGridContainer}>\r\n        {/* Chat List */}\r\n        <Grid item xs={3} container direction=\"column\" wrap=\"nowrap\">\r\n          <Grid item xs={12} component=\"header\" className={classes.header}>\r\n            <Typography variant=\"h5\">\r\n              Chats\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} container direction=\"column\" wrap=\"nowrap\" component=\"main\" className={classes.main}>\r\n            {chats.map(({ id, name }) => (\r\n              <Grid item key={id}>\r\n                {name}\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        {/* Message List */}\r\n        <Grid item xs={9} container direction=\"column\" wrap=\"nowrap\" className={classes.messageList}>\r\n          <Grid item component=\"header\" className={classes.header}>\r\n            <Typography variant=\"h5\">\r\n              Messages\r\n            </Typography>\r\n          </Grid>\r\n          <MessageList />\r\n          <Grid item container component=\"footer\" className={classes.footer}>\r\n            <Grid item xs={12} container justify=\"center\" className={classes.input}>\r\n              <Grid item xs={10}>\r\n                <NewMessageForm />\r\n              </Grid>\r\n            </Grid>\r\n            {/* <Grid item xs={1}>\r\n              <Button type=\"submit\">Send</Button>\r\n            </Grid> */}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const loadAllMessagesAsync = createAsyncThunk(\r\n    'chat/loadAllMessages',\r\n    async function () {\r\n\r\n    },\r\n);\r\n\r\nconst lorem = 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Tempore nostrum explicabo, dignissimos quas debitis beatae soluta fugit quidem praesentium quaerat ab? Autem iure expedita aliquam reiciendis tempora suscipit, debitis iste.';\r\n\r\nconst chatSlice = createSlice({\r\n    name: 'chat',\r\n    initialState: {\r\n        messages: [\r\n            { id: 1, time: '01:23', sender: 'me', text: lorem },\r\n            { id: 2, time: '01:23', sender: 'you', text: lorem },\r\n            { id: 3, time: '01:23', sender: 'me', text: lorem },\r\n            { id: 4, time: '01:23', sender: 'you', text: lorem },\r\n            { id: 5, time: '01:23', sender: 'me', text: lorem },\r\n            { id: 6, time: '01:23', sender: 'you', text: lorem },\r\n            { id: 7, time: '01:23', sender: 'me', text: lorem },\r\n            { id: 8, time: '01:23', sender: 'you', text: lorem },\r\n            { id: 9, time: '01:23', sender: 'me', text: lorem },\r\n            { id: 10, time: '01:23', sender: 'you', text: lorem },\r\n        ],\r\n    },\r\n    reducers: {\r\n        truncateMessages(state) {\r\n            state.messages.length = 0;\r\n        },\r\n        addMessage(state, { payload: message }) {\r\n            state.messages.push(message);\r\n        },\r\n    },\r\n});\r\n\r\nexport const { truncateMessages, addMessage } = chatSlice.actions;\r\n\r\nexport default chatSlice.reducer;\r\n\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport chatReducer from '../features/chat/chatSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    chat: chatReducer,\r\n  },\r\n});\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}