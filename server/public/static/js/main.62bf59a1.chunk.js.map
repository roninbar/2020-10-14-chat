{"version":3,"sources":["features/chat/socket.js","features/chat/chatSlice.js","components/MessageCard.js","components/MessageList.js","components/Chat/Chat.js","components/PrivateRoute.js","components/Sidebar/SidebarChat.js","components/Sidebar/Sidebar.js","features/user/userSlice.js","components/SignInForm.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["socket","io","on","debug","message","sendMessageAsync","createAsyncThunk","a","emit","chatSlice","createSlice","name","initialState","messages","reducers","truncateMessages","state","length","sendMessage","payload","time","sender","text","push","status","receiveMessage","extraReducers","pending","meta","id","requestId","arg","actions","useStyles","makeStyles","theme","card","margin","spacing","backgroundColor","props","MessageCard","children","other","classes","Card","className","cardContent","display","flexFlow","alignSelf","color","MessageList","Grid","item","component","container","direction","wrap","map","justify","key","xs","CardContent","Typography","variant","mapDispatchToProps","withRedux","connect","username","user","chat","useState","input","setInput","useEffect","messagesEndRef","current","scrollIntoView","useRef","Avatar","src","IconButton","SearchOutlined","MoreVert","ref","InsertEmoticon","AttachFile","onSubmit","e","preventDefault","now","Date","toLocaleTimeString","type","value","onChange","target","placeholder","Mic","Component","rest","render","to","SidebarChat","typing","onClick","onSideBarClicked","picture","undefined","lastMessage","Sidebar","React","open","setOpen","anchorRef","handleClose","event","contains","getChatMessages","handleListKeyDown","groups","sampleData","group","index","prevOpen","focus","title","aria-controls","aria-haspopup","Popper","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","MenuItem","userSlice","require","setUser","root","connectToRedux","setUsername","history","useHistory","TextField","required","label","Button","MainPage","chatData","setChatData","sideBarData","App","exact","path","SignInForm","configureStore","reducer","chatReducer","userReducer","Boolean","window","location","hostname","match","store","dispatch","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62bf59a1.chunk.js","sourcesContent":["import io from 'socket.io-client';\r\nimport debug from 'debug';\r\n\r\nconst socket = io();\r\n\r\nsocket.on('connect', function() {\r\n    debug('chat:socket')('Connected.');\r\n});\r\n\r\nsocket.on('disconnect', function() {\r\n    debug('chat:socket')('Disconnected.');\r\n})\r\n\r\nsocket.on('chat', function (message) {\r\n    debug('chat:socket')('Received message:', message);\r\n});\r\n\r\nexport default socket;\r\n\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport socket from './socket';\r\n\r\nexport const loadAllMessagesAsync = createAsyncThunk(\r\n    'chat/loadAllMessages',\r\n    async function () {\r\n\r\n    },\r\n);\r\n\r\nexport const sendMessageAsync = createAsyncThunk(\r\n    'chat/sendMessage',\r\n    function (message) {\r\n        socket.emit('chat', message);\r\n    },\r\n);\r\n\r\nconst chatSlice = createSlice({\r\n    name: 'chat',\r\n    initialState: {\r\n        messages: [],\r\n    },\r\n    reducers: {\r\n        truncateMessages(state) {\r\n            state.messages.length = 0;\r\n        },\r\n        sendMessage(state, { payload: { time, sender, text } }) {\r\n            state.messages.push({ time, sender, text, status: 'sent' });\r\n        },\r\n        receiveMessage(state, { payload: { time, sender, text } }) {\r\n            state.messages.push({ time, sender, text, status: 'received' }); \r\n        },\r\n    },\r\n    extraReducers: {\r\n        [sendMessageAsync.pending](state, { meta: { requestId: id, arg } }) {\r\n            state.messages.push({ id, ...arg, status: 'pending' });\r\n        },\r\n    },\r\n});\r\n\r\nexport const { truncateMessages, sendMessage, receiveMessage } = chatSlice.actions;\r\n\r\nexport default chatSlice.reducer;\r\n\r\n","import { Card, makeStyles } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles(function (theme) {\r\n    return {\r\n        card: {\r\n            margin: theme.spacing(1),\r\n            backgroundColor: function (props) {\r\n                return props.status === 'received' ? 'white' : '#dcf8c6';\r\n            },\r\n        },\r\n    };\r\n});\r\n\r\nexport default function MessageCard(props) {\r\n    const { children, ...other } = props;\r\n    const classes = useStyles(props);\r\n    return <Card {...other} className={classes.card}>{children}</Card>;\r\n}\r\n\r\nMessageCard.propTypes = {\r\n    status: PropTypes.string.isRequired,\r\n};\r\n\r\n","import { CardContent, Grid, makeStyles, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport MessageCard from './MessageCard';\r\n\r\nconst useStyles = makeStyles(function (theme) {\r\n    return {\r\n        cardContent: {\r\n            display: 'flex',\r\n            flexFlow: 'column nowrap',\r\n        },\r\n        sender: {\r\n            alignSelf: 'flex-start',\r\n            color: '#aaa',\r\n        },\r\n        time: {\r\n            alignSelf: 'flex-end',\r\n            color: '#aaa',\r\n        },\r\n    };\r\n});\r\n\r\nexport default function MessageList({ messages }) {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid item component=\"main\" container direction=\"column\" wrap=\"nowrap\">\r\n            {messages.map(({ id, sender, time, text, status }) => (\r\n                <Grid\r\n                    item\r\n                    container\r\n                    direction=\"row\"\r\n                    justify={status === 'pending' || status === 'sent' ? 'flex-start' : 'flex-end'}\r\n                    className={classes.message}\r\n                    key={id}\r\n                >\r\n                    <Grid item xs={8}>\r\n                        <MessageCard sender={sender} status={status}>\r\n                            <CardContent className={classes.cardContent}>\r\n                                {status === 'received' && (\r\n                                    <Typography variant=\"caption\" className={classes.sender}>{sender}</Typography>\r\n                                )}\r\n                                <Typography variant=\"body1\">{text}</Typography>\r\n                                <Typography variant=\"caption\" className={classes.time}>{time}</Typography>\r\n                            </CardContent>\r\n                        </MessageCard>\r\n                    </Grid>\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    );\r\n\r\n}\r\n\r\n","import { Avatar, IconButton } from '@material-ui/core';\r\nimport { AttachFile, InsertEmoticon, Mic, MoreVert, SearchOutlined } from '@material-ui/icons';\r\nimport MessageList from 'components/MessageList';\r\nimport { sendMessageAsync } from 'features/chat/chatSlice';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './Chat.css';\r\n\r\nconst LOCALE = 'he-IL';\r\n\r\nfunction Chat({ username, messages, sendMessageAsync }) {\r\n\r\n    function onSubmitMessage(e) {\r\n        e.preventDefault();\r\n        const now = new Date();\r\n        sendMessageAsync({\r\n            time: now.toLocaleTimeString(LOCALE),\r\n            sender: username,\r\n            text: input,\r\n        });\r\n        setInput('');\r\n    }\r\n\r\n    const [input, setInput] = useState('');\r\n\r\n    useEffect(function () {\r\n        if (messagesEndRef.current) {\r\n            messagesEndRef.current.scrollIntoView();\r\n        }\r\n    }, [messages]);\r\n\r\n    const messagesEndRef = useRef(null);\r\n\r\n    let groupData;\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat__header\">\r\n                <Avatar src={groupData?.picture ?? null} />\r\n                <div className=\"chat__headerInfo\">\r\n                    <h3>{groupData?.name ?? 'Room name'}</h3>\r\n                </div>\r\n                <div className=\"chat__headerRight\">\r\n                    <IconButton>\r\n                        <SearchOutlined />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVert />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            <div className=\"chat__body\">\r\n                <MessageList messages={messages}/>\r\n                <div ref={messagesEndRef} />\r\n            </div>\r\n            <div className=\"chat__footer\">\r\n                <IconButton>\r\n                    <InsertEmoticon />\r\n                </IconButton>\r\n                <IconButton>\r\n                    <AttachFile />\r\n                </IconButton>\r\n                <form onSubmit={onSubmitMessage}>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={input}\r\n                        onChange={({ target: { value } }) => setInput(value)}\r\n                        placeholder=\"Type a message\"\r\n                    />\r\n                    <button type=\"submit\">Send</button>\r\n                </form>\r\n                <IconButton>\r\n                    <Mic />\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nconst mapStateToProps = ({ user: { name: username }, chat: { messages } }) => ({ username, messages });\r\n\r\nconst mapDispatchToProps = { sendMessageAsync };\r\n\r\nconst withRedux = connect(mapStateToProps, mapDispatchToProps);\r\n\r\nexport default withRedux(Chat);\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\n// https://medium.com/better-programming/building-basic-react-authentication-e20a574d5e71\r\n\r\nfunction PrivateRoute({ username, component: Component, ...rest }) {\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={\r\n                props => username\r\n                    ? (\r\n                        <Component {...props} />\r\n                    )\r\n                    : (\r\n                        <Redirect to=\"/login\" />\r\n                    )\r\n            }\r\n        />\r\n    );\r\n\r\n}\r\n\r\nconst withRedux = connect(({ user: { name: username } }) => ({ username }), null);\r\n\r\nexport default withRedux(PrivateRoute);","import { Avatar } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport './SidebarChat.css';\r\n\r\nfunction SidebarChat(props) {\r\n\r\n    function handleChatClick() {\r\n        props.onSideBarClicked(props);\r\n    }\r\n\r\n    let typing;\r\n    if (props.typing) {\r\n        typing = <div className=\"sidebarChat__typing\">Typing...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"sidebarChat\" onClick={handleChatClick}>\r\n            <Avatar src={props.picture ?? undefined} />\r\n            <div className=\"sidebarChat__info\">\r\n                <h2>{props.name ?? 'Room Name'}</h2>\r\n                <p>{props.lastMessage ?? 'Room Name'}</p>\r\n                {typing}\r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nSidebarChat.propTypes = {\r\n    onSideBarClicked: PropTypes.func,\r\n    picture: PropTypes.string,\r\n    name: PropTypes.string,\r\n    lastMessage: PropTypes.string,\r\n    typing: PropTypes.bool,\r\n};\r\n\r\nexport default SidebarChat;\r\n","import { Avatar, IconButton } from '@material-ui/core';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport SearchOutlined from '@material-ui/icons/SearchOutlined';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport sampleData from './sampleData/data.json';\r\nimport SidebarChat from './SidebarChat';\r\nimport './Sidebar.css';\r\n\r\nfunction Sidebar({ onSideBarClicked }) {\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const anchorRef = React.useRef(null);\r\n\r\n    function handleToggle() {\r\n        setOpen(prevOpen => !prevOpen);\r\n    }\r\n\r\n    function handleClose(event) {\r\n        if (!anchorRef.current?.contains(event.target)) {\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    function getChatMessages(event) {\r\n        onSideBarClicked(event);\r\n    }\r\n\r\n    function handleListKeyDown(event) {\r\n        if (event.key === 'Tab') {\r\n            event.preventDefault();\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    const groups = sampleData.map((group, index) => (\r\n        <SidebarChat id={group.id} key={index}\r\n            typing={group.typing}\r\n            picture={group.picture}\r\n            name={group.name}\r\n            lastMessage={group.lastMessage}\r\n            onSideBarClicked={getChatMessages}\r\n        />\r\n    ));\r\n\r\n    const prevOpen = React.useRef(open);\r\n\r\n    React.useEffect(function () {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__header\">\r\n                <Avatar src=\"Assets/me.png\" />\r\n                <div className=\"sidebar__headerRight\">\r\n                    <IconButton title=\"Status\">\r\n                        <DonutLargeIcon />\r\n                    </IconButton>\r\n                    <IconButton title=\"New Chat\">\r\n                        <AddIcon />\r\n                    </IconButton>\r\n                    <IconButton\r\n                        title=\"Menu\"\r\n                        ref={anchorRef}\r\n                        aria-controls={open ? 'menu-list-grow' : undefined}\r\n                        aria-haspopup=\"true\"\r\n                        onClick={handleToggle}\r\n                    >\r\n                        <MoreHorizIcon />\r\n                    </IconButton>\r\n                    <Popper\r\n                        open={open}\r\n                        anchorEl={anchorRef.current}\r\n                        role={undefined}\r\n                        transition\r\n                        disablePortal\r\n                    >\r\n                        {function ({ TransitionProps, placement }) {\r\n                            return (\r\n                                <Grow\r\n                                    {...TransitionProps}\r\n                                    style={{\r\n                                        transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n                                    }}\r\n                                >\r\n                                    <Paper>\r\n                                        <ClickAwayListener onClickAway={handleClose}>\r\n                                            <MenuList\r\n                                                autoFocusItem={open}\r\n                                                id=\"menu-list-grow\"\r\n                                                onKeyDown={handleListKeyDown}\r\n                                            >\r\n                                                <MenuItem onClick={handleClose}>New Group</MenuItem>\r\n                                                <MenuItem onClick={handleClose}>Create a room</MenuItem>\r\n                                                <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n                                                <MenuItem onClick={handleClose}>Archived</MenuItem>\r\n                                                <MenuItem onClick={handleClose}>Starred</MenuItem>\r\n                                                <MenuItem onClick={handleClose}>Setting</MenuItem>\r\n                                                <MenuItem onClick={handleClose}>Log out</MenuItem>\r\n                                            </MenuList>\r\n                                        </ClickAwayListener>\r\n                                    </Paper>\r\n                                </Grow>\r\n                            );\r\n                        }}\r\n                    </Popper>\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__search\">\r\n                <div className=\"sidebar__searchContainer\">\r\n                    <SearchOutlined />\r\n                    <input type=\"text\" placeholder=\"Search or start new chat\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__chats\">\r\n                {groups}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nSidebar.propTypes = {\r\n    onSideBarClicked: PropTypes.func,\r\n};\r\n\r\nexport default Sidebar;\r\n","const { createSlice } = require('@reduxjs/toolkit');\r\n\r\nconst userSlice = createSlice({\r\n    name: 'user',\r\n    initialState: {\r\n        name: '',\r\n    },\r\n    reducers: {\r\n        setUser(state, { payload: username }) {\r\n            state.name = username;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setUser } = userSlice.actions;\r\n\r\nexport default userSlice.reducer;\r\n\r\n","import { Button, Grid, makeStyles, TextField } from '@material-ui/core';\r\nimport { setUser } from 'features/user/userSlice';\r\nimport React, { useState } from 'react';\r\nimport { connect as connectToRedux } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles(function (theme) {\r\n    return {\r\n        root: {\r\n            margin: theme.spacing(2),\r\n        },\r\n    };\r\n});\r\n\r\nexport default connectToRedux(null, { setUser })(function ({ setUser }) {\r\n\r\n    const [username, setUsername] = useState('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const history = useHistory();\r\n\r\n    function onSubmit(e) {\r\n        e.preventDefault();\r\n        setUser(username);\r\n        history.push('/');\r\n    }\r\n\r\n    function onChangeUsername({ target: { value } }) {\r\n        setUsername(value);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <Grid container justify=\"center\">\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    required\r\n                    label=\"Enter your name\"\r\n                    name=\"username\"\r\n                    value={username}\r\n                    onChange={onChangeUsername}\r\n                    classes={classes}\r\n                />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    type=\"submit\"\r\n                    classes={classes}\r\n                >\r\n                    Enter Chat\r\n                </Button>\r\n            </Grid>\r\n        </form>\r\n    );\r\n\r\n});\r\n\r\n","import './App.css';\r\nimport Chat from 'components/Chat/Chat';\r\nimport PrivateRoute from 'components/PrivateRoute';\r\nimport Sidebar from 'components/Sidebar/Sidebar';\r\nimport SignInForm from 'components/SignInForm';\r\nimport React, { useState } from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nfunction MainPage() {\r\n\r\n    const [chatData, setChatData] = useState({});\r\n\r\n    function handleChatClick(sideBarData) {\r\n        if (sideBarData?.id) {\r\n            setChatData(sideBarData);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"app__body\">\r\n                <Sidebar onSideBarClicked={handleChatClick} />\r\n                <Chat chatData={chatData} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route exact path=\"/login\" component={SignInForm} />\r\n                <PrivateRoute exact path=\"/\" component={MainPage} />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport chatReducer from '../features/chat/chatSlice';\r\nimport userReducer from '../features/user/userSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        chat: chatReducer,\r\n        user: userReducer,\r\n    },\r\n});\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import './index.css';\r\nimport { receiveMessage } from 'features/chat/chatSlice';\r\nimport socket from 'features/chat/socket';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nsocket.on('chat', function (message) {\r\n  store.dispatch(receiveMessage(message));\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}