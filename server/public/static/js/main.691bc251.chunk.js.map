{"version":3,"sources":["features/chat/socket.js","features/chat/chatSlice.js","components/MessageCard.js","components/MessageList.js","components/NewMessageForm.js","components/Chat.js","components/PrivateRoute.js","features/user/userSlice.js","components/SignInForm.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["socket","io","on","debug","message","sendMessageAsync","createAsyncThunk","a","emit","chatSlice","createSlice","name","initialState","messages","reducers","truncateMessages","state","length","sendMessage","payload","time","sender","text","push","status","receiveMessage","extraReducers","pending","arg","meta","fulfilled","type","rejected","error","actions","useStyles","makeStyles","theme","card","margin","spacing","backgroundColor","props","MessageCard","children","other","classes","Card","className","main","flexBasis","overflowY","backgroundImage","backgroundAttachment","cardContent","display","flexFlow","padding","alignSelf","color","MessageList","connect","chat","withRedux","lastMessage","useRef","useEffect","current","scrollIntoView","Grid","item","component","container","direction","wrap","map","idx","id","justify","key","ref","xs","CardContent","Typography","variant","mapDispatchToProps","NewMessageForm","user","useState","setText","onSubmit","e","preventDefault","now","Date","toLocaleTimeString","TextField","label","value","onChange","target","fullWidth","autoFocus","input","chats","height","outerGridContainer","messageList","header","footer","Chat","Container","username","Component","rest","render","to","userSlice","require","setUser","root","SignInForm","connectToRedux","setUsername","history","useHistory","required","Button","App","AppBar","path","configureStore","reducer","chatReducer","userReducer","Boolean","window","location","hostname","match","store","dispatch","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.691bc251.chunk.js","sourcesContent":["import io from 'socket.io-client';\r\nimport debug from 'debug';\r\n\r\nconst socket = io();\r\n\r\nsocket.on('connect', function() {\r\n    debug('chat:socket')('Connected.');\r\n});\r\n\r\nsocket.on('disconnect', function() {\r\n    debug('chat:socket')('Disconnected.');\r\n})\r\n\r\nsocket.on('chat', function (message) {\r\n    debug('chat:socket')('Received message:', message);\r\n});\r\n\r\nexport default socket;\r\n\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport socket from './socket';\r\n\r\nexport const loadAllMessagesAsync = createAsyncThunk(\r\n    'chat/loadAllMessages',\r\n    async function () {\r\n\r\n    },\r\n);\r\n\r\nexport const sendMessageAsync = createAsyncThunk(\r\n    'chat/sendMessage',\r\n    function (message) {\r\n        socket.emit('chat', message);\r\n    },\r\n);\r\n\r\n// const lorem = 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Tempore nostrum explicabo, dignissimos quas debitis beatae soluta fugit quidem praesentium quaerat ab? Autem iure expedita aliquam reiciendis tempora suscipit, debitis iste.';\r\n\r\nconst chatSlice = createSlice({\r\n    name: 'chat',\r\n    initialState: {\r\n        messages: [\r\n            // { id: 1, time: '01:23', sender: 'me', text: lorem, status: 'sent' },\r\n            // { id: 2, time: '01:23', sender: 'you', text: lorem, status: 'received' },\r\n            // { id: 3, time: '01:23', sender: 'me', text: lorem, status: 'sent' },\r\n            // { id: 4, time: '01:23', sender: 'you', text: lorem, status: 'received' },\r\n            // { id: 5, time: '01:23', sender: 'me', text: lorem, status: 'sent' },\r\n            // { id: 6, time: '01:23', sender: 'you', text: lorem, status: 'received' },\r\n            // { id: 7, time: '01:23', sender: 'me', text: lorem, status: 'sent' },\r\n            // { id: 8, time: '01:23', sender: 'you', text: lorem, status: 'received' },\r\n            // { id: 9, time: '01:23', sender: 'me', text: lorem, status: 'sent' },\r\n            // { id: 10, time: '01:23', sender: 'you', text: lorem, status: 'received' },\r\n        ],\r\n    },\r\n    reducers: {\r\n        truncateMessages(state) {\r\n            state.messages.length = 0;\r\n        },\r\n        sendMessage(state, { payload: { time, sender, text } }) {\r\n            state.messages.push({ time, sender, text, status: 'sent' });\r\n        },\r\n        receiveMessage(state, { payload: { time, sender, text } }) {\r\n            state.messages.push({ time, sender, text, status: 'received' });\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [sendMessageAsync.pending](state, { meta: { arg } }) {\r\n            state.messages.push({ ...arg, status: 'pending' });\r\n        },\r\n        [sendMessageAsync.fulfilled](state, { type, payload }) {\r\n        },\r\n        [sendMessageAsync.rejected](state, { type, error }) {\r\n        },\r\n    },\r\n});\r\n\r\nexport const { truncateMessages, sendMessage, receiveMessage } = chatSlice.actions;\r\n\r\nexport default chatSlice.reducer;\r\n\r\n","import { Card, makeStyles } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles(function (theme) {\r\n  return {\r\n    card: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: function (props) {\r\n        return props.status === 'received' ? 'white' : '#dcf8c6';\r\n      },\r\n    },\r\n  };\r\n});\r\n\r\nexport default function MessageCard(props) {\r\n  const { children, ...other } = props;\r\n  const classes = useStyles(props);\r\n  return <Card {...other} className={classes.card}>{children}</Card>;\r\n}\r\n\r\nMessageCard.propTypes = {\r\n  sender: PropTypes.string.isRequired,\r\n  status: PropTypes.string.isRequired,\r\n};\r\n\r\n","import { CardContent, Grid, makeStyles, Typography } from '@material-ui/core';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MessageCard from './MessageCard';\r\n\r\nconst useStyles = makeStyles(function (theme) {\r\n    return {\r\n        main: {\r\n            flexBasis: '83%',\r\n            overflowY: 'auto',\r\n            backgroundColor: '#e5ddd5',\r\n            backgroundImage: 'url(/images/bg-chat-tile-light.png)',\r\n            backgroundAttachment: 'fixed',\r\n        },\r\n        cardContent: {\r\n            display: 'flex',\r\n            flexFlow: 'column nowrap',\r\n            padding: theme.spacing(1),\r\n        },\r\n        sender: {\r\n            alignSelf: 'flex-start',\r\n            color: '#aaa',\r\n        },\r\n        time: {\r\n            alignSelf: 'flex-end',\r\n            color: '#aaa',\r\n        },\r\n    };\r\n});\r\n\r\nconst mapStateToProps = ({ chat: { messages } }) => ({ messages });\r\n\r\nconst withRedux = connect(mapStateToProps);\r\n\r\nexport const MessageList = withRedux(function (props) {\r\n\r\n    const classes = useStyles(props);\r\n\r\n    const lastMessage = useRef();\r\n\r\n    useEffect(function () {\r\n        return lastMessage.current?.scrollIntoView(false);\r\n    }, [props.messages]);\r\n    \r\n    return (\r\n        <Grid item component=\"main\" container direction=\"column\" wrap=\"nowrap\" className={classes.main}>\r\n            {props.messages?.map(({ id, sender, time, text, status }, idx) => (\r\n                <Grid\r\n                    item\r\n                    container\r\n                    direction=\"row\"\r\n                    justify={status === 'received' ? 'flex-end' : 'flex-start'}\r\n                    className={classes.message}\r\n                    key={time}\r\n                    ref={idx === props.messages?.length - 1 ? lastMessage : null}\r\n                >\r\n                    <Grid item xs={8}>\r\n                        <MessageCard sender={sender} status={status}>\r\n                            <CardContent className={classes.cardContent}>\r\n                                {status === 'received' && (\r\n                                    <Typography variant=\"caption\" className={classes.sender}>{sender}</Typography>\r\n                                )}\r\n                                <Typography variant=\"body1\">\r\n                                    {text}\r\n                                </Typography>\r\n                                <Typography variant=\"caption\" className={classes.time}>{time}</Typography>\r\n                            </CardContent>\r\n                        </MessageCard>\r\n                    </Grid>\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    );\r\n});\r\n\r\n","import { makeStyles, TextField } from '@material-ui/core';\r\nimport { sendMessageAsync } from 'features/chat/chatSlice';\r\nimport React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst useStyles = makeStyles(function (theme) {\r\n  return {\r\n  };\r\n});\r\n\r\nconst mapStateToProps = ({ user: { name: sender } }) => ({ sender });\r\n\r\nconst mapDispatchToProps = { sendMessageAsync };\r\n\r\nconst withRedux = connect(mapStateToProps, mapDispatchToProps);\r\n\r\nexport const NewMessageForm = withRedux(\r\n  function ({ sender, sendMessageAsync }) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [text, setText] = useState('');\r\n\r\n    function onChange({ target: { value } }) {\r\n      setText(value);\r\n    }\r\n\r\n    function onSubmit(e) {\r\n      e.preventDefault();\r\n      const now = new Date();\r\n      sendMessageAsync({ time: now.toLocaleTimeString(), sender, text });\r\n      setText('');\r\n    }\r\n\r\n    return (\r\n      <form onSubmit={onSubmit}>\r\n        <TextField\r\n          variant=\"outlined\"\r\n          label=\"Type a message\"\r\n          name=\"text\"\r\n          value={text}\r\n          onChange={onChange}\r\n          fullWidth\r\n          autoFocus\r\n          classes={{ input: classes.input }}\r\n        />\r\n      </form>\r\n    );\r\n  },\r\n);\r\n\r\n","import { Container, Grid, makeStyles, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { MessageList } from './MessageList';\r\nimport { NewMessageForm } from './NewMessageForm';\r\n\r\nconst chats = [\r\n  { id: 1, name: 'Girit' },\r\n  { id: 2, name: 'Doovshanit' },\r\n  { id: 3, name: 'Bzique' },\r\n  { id: 4, name: 'Namir' },\r\n];\r\n\r\nexport const useStyles = makeStyles(function (theme) {\r\n  return {\r\n    container: {\r\n      height: '100vh',\r\n    },\r\n    outerGridContainer: {\r\n      height: '100%',\r\n    },\r\n    messageList: {\r\n      height: '100%',\r\n    },\r\n    header: {\r\n      flexBasis: '7%',\r\n      backgroundColor: '#f0f0f0',\r\n    },\r\n    footer: {\r\n      flexBasis: '7%',\r\n      backgroundColor: '#f0f0f0',\r\n    },\r\n    input: {\r\n      padding: theme.spacing(1),\r\n    },\r\n  };\r\n});\r\n\r\nexport function Chat() {\r\n  const classes = useStyles();\r\n  return (\r\n    <Container className={classes.container}>\r\n      <Grid container spacing={0} className={classes.outerGridContainer}>\r\n        <Grid item xs={3} container direction=\"column\" wrap=\"nowrap\">\r\n          <Grid item xs={12} component=\"header\" className={classes.header}>\r\n            <Typography variant=\"h5\">\r\n              Chats\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} container direction=\"column\" wrap=\"nowrap\" component=\"main\" className={classes.main}>\r\n            {chats.map(({ id, name }) => (\r\n              <Grid item key={id}>\r\n                {name}\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={9} container direction=\"column\" wrap=\"nowrap\" className={classes.messageList}>\r\n          <Grid item component=\"header\" className={classes.header}>\r\n            <Typography variant=\"h5\">\r\n              Messages\r\n            </Typography>\r\n          </Grid>\r\n          <MessageList />\r\n          <Grid item container component=\"footer\" className={classes.footer}>\r\n            <Grid item xs={12} container justify=\"center\" className={classes.input}>\r\n              <Grid item xs={10}>\r\n                <NewMessageForm />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\n// https://medium.com/better-programming/building-basic-react-authentication-e20a574d5e71\r\n\r\nfunction PrivateRoute({ username, component: Component, ...rest }) {\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props =>\r\n        {\r\n          return username\r\n            ? (\r\n              <Component {...props} />\r\n            )\r\n            : (\r\n              <Redirect to=\"/login\" />\r\n            );\r\n        }\r\n      }\r\n    />\r\n  );                                           \r\n\r\n}\r\n\r\nconst withRedux = connect(({ user: { name: username } }) => ({ username }), null);\r\n\r\nexport default withRedux(PrivateRoute);","const { createSlice } = require('@reduxjs/toolkit');\r\n\r\nconst userSlice = createSlice({\r\n    name: 'user',\r\n    initialState: {\r\n        name: '',\r\n    },\r\n    reducers: {\r\n        setUser(state, { payload: username }) {\r\n            state.name = username;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setUser } = userSlice.actions;\r\n\r\nexport default userSlice.reducer;\r\n\r\n","import { Button, Grid, makeStyles, TextField } from '@material-ui/core';\r\nimport { setUser } from 'features/user/userSlice';\r\nimport React, { useState } from 'react';\r\nimport { connect as connectToRedux } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles(function (theme) {\r\n  return {\r\n    root: {\r\n      margin: theme.spacing(2),\r\n    },\r\n  };\r\n});\r\n\r\nexport const SignInForm = connectToRedux(null, { setUser })(function ({ setUser }) {\r\n\r\n  const [username, setUsername] = useState('');\r\n\r\n  const classes = useStyles();\r\n\r\n  const history = useHistory();\r\n\r\n  function onSubmit(e) {\r\n    e.preventDefault();\r\n    setUser(username);\r\n    history.push('/');\r\n  }\r\n\r\n  function onChangeUsername({ target: { value } }) {\r\n    setUsername(value);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <Grid container justify=\"center\">\r\n        <TextField\r\n          variant=\"outlined\"\r\n          required\r\n          label=\"Enter your name\"\r\n          name=\"username\"\r\n          value={username}\r\n          onChange={onChangeUsername}\r\n          classes={classes}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          type=\"submit\"\r\n          classes={classes}\r\n        >\r\n          Enter Chat\r\n        </Button>\r\n      </Grid>\r\n    </form>\r\n  );\r\n\r\n});\r\n\r\n","import './App.css';\r\nimport { AppBar } from '@material-ui/core';\r\nimport { Chat } from 'components/Chat';\r\nimport PrivateRoute from 'components/PrivateRoute';\r\nimport { SignInForm } from 'components/SignInForm';\r\nimport React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <AppBar />\r\n      <Switch>\r\n        <Route path=\"/login\" component={SignInForm} />\r\n        <PrivateRoute path=\"/\" component={Chat} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport chatReducer from '../features/chat/chatSlice';\r\nimport userReducer from '../features/user/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    chat: chatReducer,\r\n    user: userReducer,\r\n  },\r\n});\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import './index.css';\r\nimport { receiveMessage } from 'features/chat/chatSlice';\r\nimport socket from 'features/chat/socket';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nsocket.on('chat', function (message) {\r\n  store.dispatch(receiveMessage(message));\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}